@page "/game"
@page "/game/{id:int}"
@inject NavigationManager NavigationManager;
@inject GameClient client;
@using Models;

<PageTitle>@pageTitle</PageTitle>
<h1>Game Catalog</h1>
<h3>@pageTitle</h3>


@if (_game is null)
{
    <p><em>Loading...</em></p>
}
else
{

    <div class="row">
        <div class="col-sm-4">
            <EditForm Model="@_game" OnValidSubmit="HandleSubmitAsync">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="_game.Name" class="form-control"></InputText>
                </div>
                <div class="mb-3">
                    <label for="Genre" class="form-label">Genre:</label>
                    <InputSelect id="genre" @bind-Value="_game.Genre" class="form-control">
                        <option value="">Select genre</option>
                        <option value="Fighting">Fighting</option>
                        <option value="RPG">RPG</option>
                        <option value="MMORPG">MMORPG</option>
                        <option value="Action">Action</option>
                        <option value="Adventure">Adventure</option>
                        <option value="Stealth">Stealth</option>
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="_game.Price" class="form-control"></InputNumber>
                </div>
                <div class="mb-3">
                    <label for="stockUnit" class="form-label">Stock Unit:</label>
                    <InputNumber id="stockUnit" @bind-Value="_game.StockUnit" class="form-control"></InputNumber>
                </div>
                <div class="mb-3">
                    <label for="date" class="form-label">ReleaseDate:</label>
                    <InputDate id="name" @bind-Value="_game.ReleaseDate" class="form-control"></InputDate>
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" onclick="@Cancel">Cancel</button>
            </EditForm>
        </div>
    </div>
}

@code {

    [Parameter]
    public int? Id { get; set; }

    private Game? _game;
    private string pageTitle = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if(Id is not null)
        {
            Game foundGame = await client.GetGameAsync(Id.Value);
            _game = new()
            {
                Id = foundGame.Id,
                Name = foundGame.Name,
                Genre = foundGame.Genre,
                Price = foundGame.Price,
                StockUnit = foundGame.StockUnit,
                ReleaseDate = foundGame.ReleaseDate
            };
            pageTitle = $"Editing: {_game.Name}";
        }
        else
        {
            _game = new()
            {
                Name = string.Empty,
                Genre = string.Empty,
                StockUnit = 0,
                ReleaseDate = DateTime.UtcNow
            };

            pageTitle = "New Game";
        }
    }

    private async Task HandleSubmitAsync()
    {
        if(_game!.Id == 0)
        {
            await client.AddGameAsync(_game);
        }
        else
        {
            await client.UpdateGameAsync(_game);
        }
        NavigationManager.NavigateTo("/");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

}
